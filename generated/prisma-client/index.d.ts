// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  animal: (where?: AnimalWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  animal: (where: AnimalWhereUniqueInput) => AnimalPromise;
  animals: (
    args?: {
      where?: AnimalWhereInput;
      orderBy?: AnimalOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Animal>;
  animalsConnection: (
    args?: {
      where?: AnimalWhereInput;
      orderBy?: AnimalOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AnimalConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAnimal: (data: AnimalCreateInput) => AnimalPromise;
  updateAnimal: (
    args: { data: AnimalUpdateInput; where: AnimalWhereUniqueInput }
  ) => AnimalPromise;
  updateManyAnimals: (
    args: { data: AnimalUpdateManyMutationInput; where?: AnimalWhereInput }
  ) => BatchPayloadPromise;
  upsertAnimal: (
    args: {
      where: AnimalWhereUniqueInput;
      create: AnimalCreateInput;
      update: AnimalUpdateInput;
    }
  ) => AnimalPromise;
  deleteAnimal: (where: AnimalWhereUniqueInput) => AnimalPromise;
  deleteManyAnimals: (where?: AnimalWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  animal: (
    where?: AnimalSubscriptionWhereInput
  ) => AnimalSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AnimalOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "url_ASC"
  | "url_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface AnimalCreateInput {
  name?: String;
  description?: String;
  url?: String;
}

export interface AnimalUpdateInput {
  name?: String;
  description?: String;
  url?: String;
}

export interface AnimalWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  AND?: AnimalWhereInput[] | AnimalWhereInput;
  OR?: AnimalWhereInput[] | AnimalWhereInput;
  NOT?: AnimalWhereInput[] | AnimalWhereInput;
}

export interface AnimalUpdateManyMutationInput {
  name?: String;
  description?: String;
  url?: String;
}

export interface AnimalSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AnimalWhereInput;
  AND?: AnimalSubscriptionWhereInput[] | AnimalSubscriptionWhereInput;
  OR?: AnimalSubscriptionWhereInput[] | AnimalSubscriptionWhereInput;
  NOT?: AnimalSubscriptionWhereInput[] | AnimalSubscriptionWhereInput;
}

export type AnimalWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  description?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AnimalEdge {
  node: Animal;
  cursor: String;
}

export interface AnimalEdgePromise extends Promise<AnimalEdge>, Fragmentable {
  node: <T = AnimalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnimalEdgeSubscription
  extends Promise<AsyncIterator<AnimalEdge>>,
    Fragmentable {
  node: <T = AnimalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Animal {
  id: ID_Output;
  name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description?: String;
  url?: String;
}

export interface AnimalPromise extends Promise<Animal>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface AnimalSubscription
  extends Promise<AsyncIterator<Animal>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface AnimalSubscriptionPayload {
  mutation: MutationType;
  node: Animal;
  updatedFields: String[];
  previousValues: AnimalPreviousValues;
}

export interface AnimalSubscriptionPayloadPromise
  extends Promise<AnimalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnimalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnimalPreviousValuesPromise>() => T;
}

export interface AnimalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnimalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnimalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnimalPreviousValuesSubscription>() => T;
}

export interface AnimalConnection {
  pageInfo: PageInfo;
  edges: AnimalEdge[];
}

export interface AnimalConnectionPromise
  extends Promise<AnimalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnimalEdge>>() => T;
  aggregate: <T = AggregateAnimalPromise>() => T;
}

export interface AnimalConnectionSubscription
  extends Promise<AsyncIterator<AnimalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnimalEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnimalSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnimal {
  count: Int;
}

export interface AggregateAnimalPromise
  extends Promise<AggregateAnimal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnimalSubscription
  extends Promise<AsyncIterator<AggregateAnimal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AnimalPreviousValues {
  id: ID_Output;
  name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  description?: String;
  url?: String;
}

export interface AnimalPreviousValuesPromise
  extends Promise<AnimalPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  url: () => Promise<String>;
}

export interface AnimalPreviousValuesSubscription
  extends Promise<AsyncIterator<AnimalPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  url: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Animal",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
