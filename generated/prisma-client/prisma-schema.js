module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAnimal {
  count: Int!
}

type Animal {
  id: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  url: String
}

type AnimalConnection {
  pageInfo: PageInfo!
  edges: [AnimalEdge]!
  aggregate: AggregateAnimal!
}

input AnimalCreateInput {
  name: String
  description: String
  url: String
}

type AnimalEdge {
  node: Animal!
  cursor: String!
}

enum AnimalOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type AnimalPreviousValues {
  id: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String
  url: String
}

type AnimalSubscriptionPayload {
  mutation: MutationType!
  node: Animal
  updatedFields: [String!]
  previousValues: AnimalPreviousValues
}

input AnimalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnimalWhereInput
  AND: [AnimalSubscriptionWhereInput!]
  OR: [AnimalSubscriptionWhereInput!]
  NOT: [AnimalSubscriptionWhereInput!]
}

input AnimalUpdateInput {
  name: String
  description: String
  url: String
}

input AnimalUpdateManyMutationInput {
  name: String
  description: String
  url: String
}

input AnimalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [AnimalWhereInput!]
  OR: [AnimalWhereInput!]
  NOT: [AnimalWhereInput!]
}

input AnimalWhereUniqueInput {
  id: ID
  description: String
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAnimal(data: AnimalCreateInput!): Animal!
  updateAnimal(data: AnimalUpdateInput!, where: AnimalWhereUniqueInput!): Animal
  updateManyAnimals(data: AnimalUpdateManyMutationInput!, where: AnimalWhereInput): BatchPayload!
  upsertAnimal(where: AnimalWhereUniqueInput!, create: AnimalCreateInput!, update: AnimalUpdateInput!): Animal!
  deleteAnimal(where: AnimalWhereUniqueInput!): Animal
  deleteManyAnimals(where: AnimalWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  animal(where: AnimalWhereUniqueInput!): Animal
  animals(where: AnimalWhereInput, orderBy: AnimalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Animal]!
  animalsConnection(where: AnimalWhereInput, orderBy: AnimalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnimalConnection!
  node(id: ID!): Node
}

type Subscription {
  animal(where: AnimalSubscriptionWhereInput): AnimalSubscriptionPayload
}
`
      }
    